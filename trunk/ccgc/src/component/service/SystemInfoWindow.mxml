<?xml version="1.0" encoding="utf-8"?>
<AbstractInfoWindow xmlns:mx="http://www.adobe.com/2006/mxml" xmlns="component.service.*" title="系统信息">
	<mx:Script>
		<![CDATA[
			import info.knightrcom.service.LocalGameFeedbackService;
			import info.knightrcom.service.LocalSystemInfoService;
			import info.knightrcom.service.LocalServerConfigureService;
			import info.knightrcom.state.BaseStateManager;
			import info.knightrcom.util.HttpServiceProxy;
			import info.knightrcom.util.ListenerBinder;
			
			import mx.controls.Alert;
			import mx.controls.Button;
			import mx.controls.Menu;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.MenuEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			import mx.validators.Validator;

			private var gameVedioMenu:Menu;

			private function gameVedioClickHandler(event:MenuEvent):void
			{
				switch (event.item.label)
				{
					case "大连红五":
						var red5GameVedio:Red5GameVedioWindow = new Red5GameVedioWindow();
						red5GameVedio.currentLayoutCanvas=this.layoutCanvas;
						red5GameVedio.popUp();
						break;
					case "斗地主":
						var fightlandlordGameVedio:FightLandlordGameVedioWindow = new FightLandlordGameVedioWindow();
						fightlandlordGameVedio.currentLayoutCanvas=this.layoutCanvas;
						fightlandlordGameVedio.popUp();
						break;
					case "推倒胡":
						var pushdownWinGameVedio:PushdownWinGameVedioWindow = new PushdownWinGameVedioWindow();
						pushdownWinGameVedio.currentLayoutCanvas=this.layoutCanvas;
						pushdownWinGameVedio.popUp();
						break;
					default:
						Alert.show("功能尚未实现！", "消息");
				}
			}

			private function btnFeedbackClickHandler(event:MouseEvent):void
			{
			    try {
    				feedbackWindow.visible=true;
    				// mx.managers::PopUpManagerImpl 可能有bug，删除不存在的对象时会引起空指针错误
    				// mx.managers::PopUpManagerImpl/findPopupInfoByOwner()[C:\autobuild\3.x\frameworks\projects\framework\src\mx\managers\PopUpManagerImpl.as:1091]
    				PopUpManager.removePopUp(feedbackWindow);
    				PopUpManager.addPopUp(feedbackWindow, this, true);
    				PopUpManager.centerPopUp(feedbackWindow);
			    }
			    catch (e:*) {
			    }
			}

			private function btnRefreshClickHandler(event:MouseEvent):void
			{
				// 查询游戏运行时信息
				HttpServiceProxy.send(LocalSystemInfoService.RETRIEVE_GAME_RUNTIME_INFO, null, null, function(event:ResultEvent):void
					{
					});
				// 获取大厅状态信息
				btnLobbyStatusClickHander(event);
				// 获取历史举报信息
				retrieveHistroyFeeckback(event);
			}

			private function btnSubmitFeeckbackClickHandler(event:MouseEvent):void
			{
				if (Validator.validateAll(this.gameFeedbackValidators).length > 0)
				{
					Alert.show("信息填写不符合规范！", "警告");
					return;
				}
				HttpServiceProxy.send(
					LocalGameFeedbackService.COMMIT_GAME_FEEDBACK, 
					{GAME_ID: feedbackGameId.text, 
					 TITLE: feedbackTitle.text, 
					 DESCRIPTION: feedbackDesc.text, 
					 CURRENT_USER_ID: BaseStateManager.currentProfileId}, 
					null, 
					function(event:ResultEvent):void
					{
						var data:* = new XML(event.result);
						if (data.result == "SUCCESS")
						{
							Alert.show("提交成功！", "消息");
							retrieveHistroyFeeckback(null);
							feedbackWindow.visible=false;
						}
						else if (data.result == "WARNING")
						{
							Alert.show("提交失败，请检查游戏ID是否输入正确！", "警告");
						}
						else
						{
							Alert.show("提交失败！", "错误");
						}
					});
			}

			private function retrieveHistroyFeeckback(event:Event):void
			{
				// 查看历史反馈信息
				HttpServiceProxy.send(
					LocalGameFeedbackService.RETRIEVE_FEEDBACK_HISTORY, 
					{CURRENT_USER_ID: BaseStateManager.currentProfileId}, 
					feedbackHistoryInfoService);
			}

			public function quickFeedback(gameId:String):void
			{
				ListenerBinder.bind(this, FlexEvent.CREATION_COMPLETE, function (event:Event):void {
					feedbackGameId.text = gameId;
					btnFeedbackClickHandler(new MouseEvent(MouseEvent.CLICK));
				});
			}

			public function quickVedio(gameId:String, gameType:String):void
			{
				var vedioClass:Class = getDefinitionByName("component.service." + gameType + "VedioWindow") as Class;
				var gameVedio:* = new vedioClass();
				ListenerBinder.bind(gameVedio, FlexEvent.CREATION_COMPLETE, function (event:Event):void {
					gameVedio.gameId.text = gameId;
				});
				gameVedio.currentLayoutCanvas = this.layoutCanvas;
				gameVedio.popUp();
			}

			private function btnLobbyStatusClickHander(event:MouseEvent):void {
				HttpServiceProxy.send(LocalServerConfigureService.RETRIEVE_LOBBY_STATUS, null, null, function (event:ResultEvent):void {
					var data:* = new XML(event.result);
					var items:Array = new Array();
					var num:Number = 1;
					for each (var eachItem:String in data.tag.string) {
						items.push({index : num++, 
						roomName : eachItem.split("~")[0], 
						rawPlayerCount : eachItem.split("~")[1], 
						wanderPlayerCount : eachItem.split("~")[2], 
						idlePlayerCount : eachItem.split("~")[3], 
						matchingPlayerCount : eachItem.split("~")[4], 
						playingPlayerCount : eachItem.split("~")[5], 
						totalPlayerCount : eachItem.split("~")[6]});
					}
					lobbyStatusDatagrid.dataProvider = items;
				});
			}
		]]>
	</mx:Script>
	<creationComplete>
		<![CDATA[
	    	// 当前窗口中游戏录像菜单
        	gameVedioMenu = new Menu;
        	gameVedioMenu.dataProvider = popupMenuItems;
        	btnGameVedio.popUp = gameVedioMenu;
        	ListenerBinder.bind(gameVedioMenu, MenuEvent.CHANGE, gameVedioClickHandler);
            // 当前窗口中反馈按钮
        	ListenerBinder.bind(btnFeedback, MouseEvent.CLICK, btnFeedbackClickHandler);
        	// 当前窗口中反馈功能提交按钮
        	ListenerBinder.bind(btnSubmitFeeckback, MouseEvent.CLICK, btnSubmitFeeckbackClickHandler);
        	// 当前窗口中反馈窗口关闭事件
        	ListenerBinder.bind(feedbackWindow, CloseEvent.CLOSE, function ():void {
            	for each (var thisFormItem:FormItem in Form(editor).getChildren()) {
            		var control:Object = thisFormItem.getChildAt(0);
            		if (control is TextInput) {
            			TextInput(control).text = "";
            		} else if (control is TextArea) {
            			TextArea(control).text = "";
            		} else {
            			throw Error("无法为当前控件进行初始化");
            		}
            	}
        		feedbackWindow.visible = false;
        	});
        	ListenerBinder.bind(feedbackWindow, FlexEvent.SHOW, function (event:Event):void {
        		/*
        		feedbackGameId.text = "";
        		feedbackTitle.text = "";
        		feedbackDesc.text = "";
        		*/
        		retrieveHistroyFeeckback(event);
        	});
        	// 刷新按钮
        	ListenerBinder.bind(btnRefresh, MouseEvent.CLICK, btnRefreshClickHandler);
        	btnRefresh.dispatchEvent(new MouseEvent(MouseEvent.CLICK));
    	]]>
	</creationComplete>
	<!-- 操作按钮 -->
	<mx:Array id="popupMenuItems">
		<mx:Object label="" data="" id="nullItem"/>
		<mx:Object label="大连红五" data="Red5Game" id="red5"/>
		<!--
		<mx:Object label="斗地主" data="FightLandlordGame" id="fightLandlord"/>
		<mx:Object label="推倒胡" data="PushdownWinGame" id="pushdownWin"/>
		<mx:Object label="穷胡" data="QiongWinGame" id="qiongWin"/>
		-->
	</mx:Array>
	<mx:HBox horizontalGap="4"
			 top="10"
			 left="10"
			 right="10"
			 id="hbox1">
		<mx:PopUpButton id="btnGameVedio" label="游戏录像" openAlways="true"/>
		<mx:Button id="btnFeedback" label="作弊举报"/>
		<mx:Button id="btnRefresh" label="刷新信息"/>
	</mx:HBox>
	<!-- 查询结果 -->
	<mx:TabNavigator left="10" right="10" top="40" bottom="10" id="multTab">
		<!-- 大厅状态信息 -->
		<!--
			<mx:Canvas label="大厅状态信息" width="100%" height="100%" visible="false">
				<mx:DataGrid id="lobbyStatusDatagrid_"
							 left="0"
							 right="0"
							 top="0"
							 bottom="0">
					<mx:columns>
						<mx:DataGridColumn headerText="编号" dataField=""/>
						<mx:DataGridColumn headerText="项目名称" dataField=""/>
						<mx:DataGridColumn headerText="值" dataField=""/>
					</mx:columns>
				</mx:DataGrid>
			</mx:Canvas>
		-->
		<!-- 大厅状态信息 -->
		<mx:Canvas label="大厅状态信息" width="100%" height="100%">
			<mx:DataGrid id="lobbyStatusDatagrid"
						 left="0"
						 right="0"
						 top="0"
						 bottom="0">
				<mx:columns>
					<mx:DataGridColumn headerText="编号" dataField="index"/>
					<mx:DataGridColumn headerText="房间名称" dataField="roomName"/>
					<mx:DataGridColumn headerText="游戏进行中人数" dataField="playingPlayerCount"/>
					<mx:DataGridColumn headerText="等待队列中人数" dataField="matchingPlayerCount"/>
					<mx:DataGridColumn headerText="房间内闲散人数" dataField="idlePlayerCount"/>
					<mx:DataGridColumn headerText="房间内总计人数" dataField="totalPlayerCount"/>
				</mx:columns>
			</mx:DataGrid>
		</mx:Canvas>
		<!-- 历史举报信息 -->
		<mx:Canvas label="历史举报信息" width="100%" height="100%">
			<mx:DataGrid id="feedbackDatagrid"
						 left="0"
						 right="0"
						 top="0"
						 bottom="0">
				<mx:dataProvider>{feedbackHistoryInfoService.lastResult.tag.map}</mx:dataProvider>
				<mx:columns>
					<mx:DataGridColumn headerText="游戏ID" dataField="gameId"/>
					<mx:DataGridColumn headerText="游戏类别" dataField="gameType"/>
					<mx:DataGridColumn headerText="游戏时间" dataField="gameTime"/>
					<mx:DataGridColumn headerText="标题" dataField="title"/>
					<mx:DataGridColumn headerText="当前状态" dataField="status"/>
					<mx:DataGridColumn headerText="举报时间" dataField="createTime"/>
				</mx:columns>
			</mx:DataGrid>
		</mx:Canvas>
	</mx:TabNavigator>
	<!-- 作弊举报 -->
	<!-- 查询组件 -->
	<mx:HTTPService id="feedbackHistoryInfoService"
					showBusyCursor="true"
					useProxy="false"
					resultFormat="e4x"
					method="POST"/>
	<mx:TitleWindow layout="absolute"
					horizontalCenter="0"
					verticalCenter="0"
					title="作弊举报"
					id="feedbackWindow"
					showCloseButton="true"
					height="374">
		<mx:visible>false</mx:visible>
		<mx:Form id="editor"
				 left="10"
				 right="10"
				 top="10"
				 bottom="265"
				 paddingTop="0"
				 paddingRight="0"
				 paddingBottom="0"
				 paddingLeft="0">
			<mx:FormItem label="游戏ID" required="true" width="100%" direction="horizontal">
				<mx:TextInput id="feedbackGameId" width="100%" text=""/>
				<mx:Label width="50" textAlign="right" text="{feedbackGameId.text.length + '/100'}"/>
			</mx:FormItem>
			<mx:FormItem label="标题" required="true" width="100%" direction="horizontal">
				<mx:TextInput id="feedbackTitle" width="100%"/>
				<mx:Label width="50" textAlign="right" text="{feedbackTitle.text.length + '/50'}"/>
			</mx:FormItem>
			<mx:FormItem label="描述" required="true" width="100%" direction="horizontal">
				<mx:TextArea id="feedbackDesc" width="100%" height="80"/>
				<mx:Label width="50" textAlign="right" text="{feedbackDesc.text.length + '/200'}"/>
			</mx:FormItem>
		</mx:Form>
		<mx:Button id="btnSubmitFeeckback" label="提交举报" bottom="168" horizontalCenter="171"/>
		<mx:HRule left="10"
				  right="10"
				  y="181"
				  width="413"
				  height="2"/>
		<mx:Label x="10" y="182" text="历史举报记录"/>
		<mx:DataGrid minWidth="400"
					 left="10"
					 right="10"
					 top="200"
					 bottom="10">
			<mx:dataProvider>{feedbackHistoryInfoService.lastResult.tag.map}</mx:dataProvider>
			<mx:columns>
				<mx:DataGridColumn headerText="游戏ID" dataField="gameId"/>
				<mx:DataGridColumn headerText="游戏类别" dataField="gameType"/>
				<mx:DataGridColumn headerText="标题" dataField="title"/>
				<mx:DataGridColumn headerText="当前状态" dataField="status"/>
				<mx:DataGridColumn headerText="举报时间" dataField="createTime"/>
			</mx:columns>
		</mx:DataGrid>
	</mx:TitleWindow>
	<!-- 验证器 -->
	<mx:Array id="gameFeedbackValidators">
		<mx:StringValidator source="{feedbackGameId}" required="true" property="text" requiredFieldError="游戏ID不能为空！"/>
		<mx:StringValidator source="{feedbackTitle}"
							required="true"
							property="text"
							minLength="1"
							maxLength="50"
							tooShortError="标题不能为空，字数必须在1-50之间！"
							tooLongError="标题不能为空，字数必须在1-50之间！"
							requiredFieldError="标题不能为空，字数必须在1-50之间！"/>
		<mx:StringValidator source="{feedbackDesc}"
							required="true"
							property="text"
							minLength="20"
							maxLength="200"
							tooShortError="请认真填写举报内容，字数必须在20-200之间！"
							tooLongError="请认真填写举报内容，字数必须在20-200之间！"
							requiredFieldError="请认真填写举报内容，字数必须在20-200之间！"/>
	</mx:Array>
</AbstractInfoWindow>
