<?xml version="1.0" encoding="utf-8"?>
<FunctionWindow xmlns="info.knightrcom.service.*"
				xmlns:mx="http://www.adobe.com/2006/mxml"
				creationComplete="creationCompleteHandler();">
	<mx:Script>
		<![CDATA[
	        import mx.collections.ArrayCollection;
	        import mx.utils.ArrayUtil;
	        import mx.validators.Validator;
	        import mx.events.StateChangeEvent;
	        import mx.binding.utils.ChangeWatcher;
	        import mx.binding.utils.BindingUtils;
	        import mx.states.State;
	        import mx.core.Application;
	        import mx.controls.RadioButton;
			import mx.utils.Base64Decoder;
			import mx.events.DragEvent;
			import info.knightrcom.model.OperationMethod;
			import mx.controls.Alert;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.controls.TextArea;
			import mx.containers.FormItem;
			import info.knightrcom.util.HttpServiceProxy;
			import info.knightrcom.util.ListenerBinder;
			import info.knightrcom.service.LocalPlayerProfileService;
			import mx.events.ItemClickEvent;
			import mx.events.CloseEvent;

			public var currentOperationMethod:OperationMethod;
			
			public static var adminApp:Administration;

			protected function defaultSearch():void
			{
				HttpServiceProxy.send(
						LocalPlayerProfileService.RETRIEVE_PLAYER_PROFILE, 
						{CURRENT_PAGE : CURRENT_PAGE,
						 ROLE : role.selectedIndex == 0 ? null : role.value,
						 USER_ID : userId.text.length == 0 ? null : userId.text,
						 CURRENT_USER_ID : Application.application.currentRole == "GroupUser" ? Application.application.currentUserId : null 
						}, 
						infoService);
			}

			protected function clearEditor():void
			{
				for each (var thisFormItem:FormItem in Form(this.editor).getChildren())
				{
					var control:Object=thisFormItem.getChildAt(0);
					if (control is ComboBox)
					{
						ComboBox(control).text = null;
						ComboBox(control).data = null;
					}
					else if (control is TextInput)
					{
						TextInput(control).text="";
					}
					else if (control is TextArea)
					{
						TextArea(control).text="";
					}
					else if (control is RadioButton)
					{
					    RadioButton(control).group.getRadioButtonAt(0).selected = true;
					}
					else
					{
						throw Error("无法为当前控件进行初始化");
					}
					control["enabled"] = true;
				}
			}

            private function btnCreateHandler(event:MouseEvent):void {
				clearEditor();
				currentOperationMethod=OperationMethod.CREATE;
				currentState="EDIT";
            }

            private function btnUpdateHandler(event:MouseEvent):void {
			    if (datagrid.selectedIndices.length == 0) {
			        Alert.show("请选择要更新的数据！", "警告");
			        return;
			    }
				clearEditor();
				currentOperationMethod=OperationMethod.UPDATE;
	            currentState="EDIT";
				HttpServiceProxy.send(
				        LocalPlayerProfileService.READ_PLAYER_PROFILE, 
				        {PROFILE_ID : datagrid.selectedItem.profileId.text()}, 
				        null, 
				        function (event:ResultEvent):void {
						    // 将读取到的玩家信息填写到对应的控件中
							var e4xResult:XML = new XML(event.result);
							playerProfileId.text = e4xResult.entity.profileId.text();
							playerUserId.text = e4xResult.entity.userId.text();
							// 将密码长度缩短至16位长
							playerPassword.text = e4xResult.entity.password.text();
							playerPassword.text = playerPassword.text.substring(0, 16);
							playerPasswordConfirm.text = e4xResult.entity.password.text();
							playerPasswordConfirm.text = playerPasswordConfirm.text.substring(0, 16);
							playerRlsPath.text = e4xResult.entity.rlsPath;
							playerRlsPath.data = e4xResult.entity.rlsPath;
							var dataProvider:ArrayCollection = ArrayCollection(playerRlsPath.dataProvider);
							for (var i:int = 0; i < dataProvider.length; i++) {
							    if (e4xResult.entity.rlsPath == dataProvider.getItemAt(i).data) {
							        playerRlsPath.selectedIndex = i;
							        break;
							    }
							}
							playerCurrentScore.text = e4xResult.entity.currentScore;
							playerLimit.text = e4xResult.entity.initLimit;
							dataProvider = ArrayCollection(playerRole.dataProvider);
							for (i = 0; playerRole != null && i < dataProvider.length; i++) {
							    if (e4xResult.entity.role == dataProvider.getItemAt(i).data) {
							        playerRole.selectedIndex = i;
							        break;
							    }
							}
							if (e4xResult.entity.status == "1") {
							    disableGroup.getRadioButtonAt(0).selected = true;
							} else {
							    disableGroup.getRadioButtonAt(1).selected = true;
							}
						},
						function (event:FaultEvent):void {
						    Alert.show("通信失败！", "错误");
						});
            }

            private function btnDeleteHandler(event:MouseEvent):void {
			    if (datagrid.selectedIndices.length == 0) {
			        Alert.show("请选择要删除的数据！", "警告");
			        return;
			    }
				currentOperationMethod=OperationMethod.DELETE;
				Alert.yesLabel = "确认";
				Alert.noLabel = "取消";
			    Alert.show( "确定要删除？",
						"消息", 
						Alert.YES | Alert.NO,
						adminApp,
						function handleAlert(event:CloseEvent):void {
						    if(event.detail == Alert.YES)
						    {
								HttpServiceProxy.send(LocalPlayerProfileService.DELETE_PLAYER_PROFILE, {PROFILE_ID: datagrid.selectedItem.profileId.text()}, null, 
								        function (event:ResultEvent):void 
		    							{
		    								Alert.show("删除玩家信息成功！", "消息");
		    								defaultSearch();
		    							},
		    							function (event:FaultEvent):void {
	    									Alert.show("删除玩家信息失败！", "错误");
	    								}
		    					);
				 			}
						},
						null,
						Alert.YES);
				currentOperationMethod=OperationMethod.UNKNOWN;
            }

            private function btnSubmitHandler(event:MouseEvent):void {
                if (Validator.validateAll(submitValidators).length != 0) {
                	Alert.show("数据验证未通过！", "警告");
                    return;
                }
                if (playerPassword.text != playerPasswordConfirm.text) {
                	Alert.show("密码与确认密码不一致！", "警告");
                    return;
                }
				if (currentOperationMethod == OperationMethod.CREATE && parseInt(playerCurrentScore.text) % 100 != 0) {
					Alert.show("充值积分必须是100的倍数！", "警告");
					return;
				}
				if (currentOperationMethod == OperationMethod.CREATE)
				{
					HttpServiceProxy.send(LocalPlayerProfileService.CREATE_PLAYER_PROFILE, 
					        {USER_ID : playerUserId.text, 
					         PASSWORD : playerPassword.text, 
					         RLS_PATH : (playerRlsPath.selectedItem.data + "!" + playerUserId.text).replace(/^Administrator!/, ""), 
					         CURRENT_SCORE : playerCurrentScore.text, 
					         INIT_LIMIT : playerLimit.text, 
					         ROLE : playerRole.selectedItem.data, 
					         STATUS : disableGroup.selectedValue, 
					         CURRENT_ROLE : Application.application.currentRole,
					         CURRENT_USER_ID : Application.application.currentUserId}, 
					        null, 
					        function (event:ResultEvent):void {
								var e4xResult:XML=new XML(event.result);
								if (e4xResult.result == "WARNING") {
									Alert.show("用户ID已存在！", "警告");
								} else if (e4xResult.result == "SUCCESS") {
									playerProfileId.text=e4xResult.entity.profileId.text();
									Alert.show("玩家信息更新成功！", "消息", 4, null, function (e:Event):void {
									    btnBack.dispatchEvent(new MouseEvent(MouseEvent.CLICK));
									});
								} else {
								    Alert.show("玩家信息更新失败！", "错误");
								}
							},
							function (event:FaultEvent):void {
								Alert.show("通信失败！", "错误");
							});
				}
				else if (currentOperationMethod == OperationMethod.UPDATE)
				{
					HttpServiceProxy.send(LocalPlayerProfileService.UPDATE_PLAYER_PROFILE, 
					        {PROFILE_ID : playerProfileId.text,
					         PASSWORD : playerPassword.text, 
					         ROLE : playerRole.selectedItem.data, 
					         STATUS : disableGroup.selectedValue, 
					         CURRENT_ROLE : Application.application.currentRole},
					      	null, 
					        function (event:ResultEvent):void {
								var e4xResult:XML=new XML(event.result);
								playerProfileId.text=e4xResult.entity.profileId.text();
								currentOperationMethod=OperationMethod.UPDATE;
								Alert.show("玩家信息更新成功！", "消息");
							},
							function (event:FaultEvent):void {
								Alert.show("玩家信息更新失败！", "错误");
							});
				}
            }

            private function btnBackHandler(event:MouseEvent):void {
				currentOperationMethod=OperationMethod.UNKNOWN;
				currentState="LIST";
            }

            private function stateChangeHandler(event:StateChangeEvent):void {
                if (currentState == "LIST") {
                    defaultSearch();
                }

                if (currentState == "EDIT" && currentOperationMethod == OperationMethod.CREATE) {
                    // 初始化玩家关系路径
                    var rlsPathLoad:Function = function (event:ResultEvent):void {
                        var rlsPathes:Array = new Array();
                        playerRlsPath.dataProvider = null;
    			        for each (var rlsPath:* in new XML(event.result).tag.map.rlsPath) {
    			            rlsPathes.push({data: rlsPath, label: rlsPath});
    			        }
    			        playerRlsPath.dataProvider = rlsPathes;
    			        playerRlsPath.selectedItem = null;
                    };
                    if (Application.application.currentRole != "GroupUser") {
                        // 取得除Administration之外的关系路径取出
    				    HttpServiceProxy.send(LocalPlayerProfileService.RETRIEVE_PLAYER_RLS_PATH, null, null, rlsPathLoad);
                    } else if (Application.application.currentRole == "GroupUser") {
                        // 将与组用户相关的关系路径取出
    				    HttpServiceProxy.send(
    				            LocalPlayerProfileService.RETRIEVE_PLAYER_RLS_PATH, 
    				            {CURRENT_RLS_PATH : Application.application.currentRlsPath}, 
    				            null, 
    				            rlsPathLoad);
                    }
                }

                // 控件状态控制
                if (currentOperationMethod == OperationMethod.CREATE) {
                } else {
    				playerUserId.enabled = false;
    				playerRlsPath.enabled = false;
    				playerCurrentScore.enabled = false;
    				playerLimit.enabled = false;
    				playerRole.enabled = false;
                }
            }

			protected function creationCompleteHandler():void
			{
				// 状态初始化
				initializeEachState("LIST");
				// 事件绑定
				// 检索
				ListenerBinder.bind(btnSearch, MouseEvent.CLICK, function(event:MouseEvent):void {
					CURRENT_PAGE=1;
					defaultSearch();
				});
				// 翻页
				ListenerBinder.bind(pageRoller, ItemClickEvent.ITEM_CLICK, function(event:ItemClickEvent):void {
					if (isNaN(TOTAL_PAGE) || TOTAL_PAGE < 1)
					{
						return;
					}
					if (event.index == 0)
					{
						CURRENT_PAGE--;
					}
					else if (event.index == 1)
					{
						CURRENT_PAGE++;
					}
					defaultSearch();
				});
				// 添加
				ListenerBinder.bind(btnCreate, MouseEvent.CLICK, btnCreateHandler);
				// 更新
				ListenerBinder.bind(btnUpdate, MouseEvent.CLICK, btnUpdateHandler);
				// 删除
				ListenerBinder.bind(btnDelete, MouseEvent.CLICK, btnDeleteHandler);
				// 确定
				ListenerBinder.bind(btnSubmit, MouseEvent.CLICK, btnSubmitHandler);
				// 取消
				ListenerBinder.bind(btnBack, MouseEvent.CLICK, btnBackHandler);
				// 绑定监听
                ListenerBinder.bind(this, StateChangeEvent.CURRENT_STATE_CHANGE, stateChangeHandler);

			    // 初始化玩家角色
			    HttpServiceProxy.send(LocalPlayerProfileService.RETRIEVE_PLAYER_ROLE, {CURRENT_ROLE : Application.application.currentRole}, null, 
		            function(event:ResultEvent):void {
    			        playerRole.dataProvider = null;
    			        var roles:Array = new Array();
    			        for each (var eachRole:String in new XML(event.result).tag.string) {
    			            // 角色值
    			        	var itemData:String = eachRole.split("~")[0];
    			        	// 角色名称
    			        	var itemLabel:String = eachRole.split("~")[1];
    			        	if (itemData == "Administrator") {
    			        	    // 禁止创建系统管理员
    			        	    continue;
    			        	}
    			        	if (Application.application.currentRole == "GameMaster" && (itemData == "SuperGameMaster" || itemData == "GameMaster")) {
    			        	    // 普通的游戏管理员不可以创建超级游戏管理员和游戏管理员
    			        	    continue;
    			        	} if (Application.application.currentRole == "GroupUser" && (itemData == "GameMaster" || itemData == "SuperGameMaster")) {
						    	// 取消SuperGameMaster和GameMaster权限
						    	continue;
						    }
    			            roles.push({data : itemData, label : itemLabel});
    			        }
    			        playerRole.dataProvider = roles;
		            }
			    );

			    // 数据绑定
                ChangeWatcher.watch(playerCurrentScore, "text", function(event:Event):void {
                    if (currentState == "EDIT" && currentOperationMethod == OperationMethod.CREATE) {
                        playerLimit.text = playerCurrentScore.text;
                    }
                });
                
                // 数据查询
                defaultSearch();
			}

			private function statusLabelFunction(item:Object, column:DataGridColumn):String {
                return item.status == "0" ? "禁用" : "启用";
            }
		]]>
	</mx:Script>
	<states>
		<mx:State name="EDIT">
			<mx:AddChild position="lastChild">
				<mx:Form id="editor"
						 left="0"
						 right="0"
						 top="0"
						 bottom="40">
					<mx:FormItem label="uuid" visible="false">
						<mx:TextInput id="playerProfileId"/>
					</mx:FormItem>
					<mx:FormItem label="用户ID">
						<mx:TextInput id="playerUserId" maxChars="16"/>
					</mx:FormItem>
					<mx:FormItem label="密码">
						<mx:TextInput id="playerPassword"
									  displayAsPassword="true"
									  maxChars="16"/>
					</mx:FormItem>
					<mx:FormItem label="密码确认">
						<mx:TextInput id="playerPasswordConfirm"
									  displayAsPassword="true"
									  maxChars="16"/>
					</mx:FormItem>
					<mx:FormItem label="所属用户组">
						<mx:ComboBox id="playerRlsPath" rowCount="10"/>
					</mx:FormItem>
					<mx:FormItem label="初始分值">
						<mx:TextInput id="playerCurrentScore" restrict="0-9" maxChars="6"/>
					</mx:FormItem>
					<mx:FormItem label="用户额度">
						<mx:TextInput id="playerLimit" maxChars="6" editable="false"/>
					</mx:FormItem>
					<mx:FormItem label="角色">
						<mx:ComboBox id="playerRole"/>
					</mx:FormItem>
					<mx:FormItem label="状态">
    					<mx:RadioButtonGroup id="disableGroup"/>
    					<mx:RadioButton label="启用" value="1" group="{disableGroup}"/>
    					<mx:RadioButton label="禁用" value="0" group="{disableGroup}"/>
					</mx:FormItem>
				</mx:Form>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:Button label="确定"
						   id="btnSubmit"
						   right="66"
						   bottom="10"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:Button label="返回"
						   id="btnBack"
						   right="10"
						   bottom="10"/>
			</mx:AddChild>
			<mx:SetProperty name="title"
							value="用户编辑"/>
		</mx:State>
		<mx:State name="LIST">
			<mx:AddChild position="lastChild">
				<mx:HBox left="10"
						 right="10"
						 top="10">
					<mx:Label text="用户ID"/>
					<mx:TextInput id="userId"/>
					<mx:Label text="角色"/>
					<mx:ComboBox id="role">
						<mx:dataProvider>
			                <mx:Array>
			                    <mx:Object label="全部" />
			                    <mx:Object label="组用户" data="GroupUser" />
			                    <mx:Object label="普通组用户" data="User" />
			                </mx:Array>
			            </mx:dataProvider>
					</mx:ComboBox>
					<mx:Button id="btnSearch"
							   label="查询"/>
				</mx:HBox>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:HBox top="40"
						 left="10"
						 right="10">
					<mx:Button label="添加"
							   id="btnCreate"/>
					<mx:Button label="修改"
							   id="btnUpdate"/>
					<mx:Button label="删除"
							   id="btnDelete" visible="false"/>
				</mx:HBox>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:DataGrid top="68"
							 left="10"
							 right="10"
							 bottom="10"
							 id="datagrid">
					<mx:dataProvider>{infoService.lastResult.entityList.map}</mx:dataProvider>
					<mx:columns>
						<mx:DataGridColumn dataField="profileId"
										   visible="false"/>
						<mx:DataGridColumn dataField="password"
										   visible="false"/>
						<mx:DataGridColumn headerText="用户ID"
										   dataField="userId"/>
						<mx:DataGridColumn headerText="所属用户组"
										   dataField="rlsPath"/>
						<mx:DataGridColumn headerText="用户额度"
										   dataField="currentScore"/>
						<mx:DataGridColumn headerText="角色"
										   dataField="role"/>
						<mx:DataGridColumn headerText="当前状态"
										   dataField="status" labelFunction="statusLabelFunction"/>
						<mx:DataGridColumn headerText="创建日期"
										   dataField="createTime"/>
						<mx:DataGridColumn headerText="创建人"
										   dataField="createBy"/>
					</mx:columns>
				</mx:DataGrid>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:ControlBar paddingTop="0"
							   paddingBottom="0"
							   horizontalAlign="right">
					<mx:Label id="lblPage"
							  text="{infoService.lastResult.pagination.currentPage + '/' + infoService.lastResult.pagination.totalPage}"/>
					<mx:LinkBar id="pageRoller">
						<mx:Array>
							<mx:Object label="前页"/>
							<mx:Object label="后页"/>
						</mx:Array>
					</mx:LinkBar>
				</mx:ControlBar>
			</mx:AddChild>
			<mx:SetProperty name="title"
							value="用户列表"/>
		</mx:State>
	</states>
	<mx:Number id="CURRENT_PAGE">{infoService.lastResult.pagination.currentPage}</mx:Number>
	<mx:Number id="TOTAL_PAGE">{infoService.lastResult.pagination.totalPage}</mx:Number>
    <!-- 验证器 -->
    <mx:Array id="submitValidators">
        <mx:RegExpValidator source="{playerUserId}"
                            required="true"
                            property="text"
                            expression="{'^[a-z][0-9a-z]{3,15}$'}"
                            flags="i"
                            noMatchError="用户ID长度需要在4到16之间，只能由半角字母和数字组合，且首位必须为字母！"
                            requiredFieldError="用户ID不能为空！"/>
        <mx:StringValidator source="{playerPassword}"
                            required="true"
                            property="text"
                            minLength="6" maxLength="16"
                            tooShortError="密码最小长度为6！"
                            tooLongError="密码最大长度为16！"
                            requiredFieldError="密码不能为空！"/>
        <mx:StringValidator source="{playerPasswordConfirm}"
                            required="true"
                            property="text"
                            minLength="6" maxLength="16"
                            tooShortError="确认密码最小长度为6！"
                            tooLongError="确认密码最大长度为16！"
                            requiredFieldError="密码确认不能为空！"/>
        <mx:StringValidator source="{playerRlsPath}"
                            required="true"
                            property="text"
                            requiredFieldError="所属用户组不能为空！"/>
        <mx:NumberValidator source="{playerCurrentScore}"
                            required="true"
                            property="text"
                            invalidCharError="初始分值必须是数字！"
                            requiredFieldError="初始分值不能为空！"/>
        <mx:StringValidator source="{playerRole}"
                            required="true"
                            property="text"
                            requiredFieldError="用户角色不能为空！"/>
    </mx:Array>
</FunctionWindow>
