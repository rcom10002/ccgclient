<?xml version="1.0" encoding="utf-8"?>
<FunctionWindow xmlns="info.knightrcom.service.*"
				xmlns:mx="http://www.adobe.com/2006/mxml"
				creationComplete="creationCompleteHandler();">
	<mx:Script>
		<![CDATA[
	        import mx.validators.Validator;
	        import mx.events.StateChangeEvent;
	        import mx.binding.utils.ChangeWatcher;
	        import mx.binding.utils.BindingUtils;
	        import mx.states.State;
	        import mx.core.Application;
	        import mx.controls.RadioButton;
			import mx.utils.Base64Decoder;
			import mx.events.DragEvent;
			import info.knightrcom.model.OperationMethod;
			import mx.controls.Alert;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.controls.TextArea;
			import mx.containers.FormItem;
			import info.knightrcom.util.HttpServiceProxy;
			import info.knightrcom.util.ListenerBinder;
			import info.knightrcom.service.LocalPlayerProfileService;
			import mx.events.ItemClickEvent;

			public var currentOperationMethod:OperationMethod;

			protected function defaultSearch():void
			{
				HttpServiceProxy.send(LocalPlayerProfileService.RETRIEVE_PLAYER_PROFILE, {CURRENT_PAGE: CURRENT_PAGE}, infoService);
			}

			protected function clearEditor():void
			{
				for each (var thisFormItem:FormItem in Form(this.editor).getChildren())
				{
					var control:Object=thisFormItem.getChildAt(0);
					if (control is ComboBox)
					{
						ComboBox(control).text="";
					}
					else if (control is TextInput)
					{
						TextInput(control).text="";
					}
					else if (control is TextArea)
					{
						TextArea(control).text="";
					}
					else if (control is RadioButton)
					{
					    RadioButton(control).group.getRadioButtonAt(0).selected = true;
					}
					else
					{
						throw Error("无法为当前控件进行初始化");
					}
				}
			}

			protected function creationCompleteHandler():void
			{
				// 状态初始化
				initializeEachState("LIST");
				// 事件绑定
				// 检索
				ListenerBinder.bind(btnSearch, MouseEvent.CLICK, function(event:MouseEvent):void
					{
						CURRENT_PAGE=1;
						defaultSearch();
					});
				// 翻页
				ListenerBinder.bind(pageRoller, ItemClickEvent.ITEM_CLICK, function(event:ItemClickEvent):void
					{
						if (isNaN(TOTAL_PAGE) || TOTAL_PAGE < 1)
						{
							return;
						}
						if (event.index == 0)
						{
							CURRENT_PAGE--;
						}
						else if (event.index == 1)
						{
							CURRENT_PAGE++;
						}
						defaultSearch();
					});
				// 添加
				ListenerBinder.bind(btnCreate, MouseEvent.CLICK, function():void
					{
						currentState="EDIT";
						currentOperationMethod=OperationMethod.CREATE;
						clearEditor();
					});
				// 更新
				ListenerBinder.bind(btnUpdate, MouseEvent.CLICK, function():void
					{
					    if (datagrid.selectedIndices.length == 0) {
					        Alert.show("请选择要更新的数据！");
					        return;
					    }
						currentState="EDIT";
						currentOperationMethod=OperationMethod.UPDATE;
						HttpServiceProxy.send(LocalPlayerProfileService.READ_PLAYER_PROFILE, {PROFILE_ID: datagrid.selectedItem.profileId.text()}, null, 
						        function(event:ResultEvent):void
    							{
    								var e4xResult:XML=new XML(event.result);
    								playerProfileId.text=e4xResult.entity.profileId.text();
    								playerUserId.text=e4xResult.entity.userId.text();
    								playerPassword.text=e4xResult.entity.password.text();
    								playerPasswordConfirm.text=e4xResult.entity.password.text();
    								trace(e4xResult.entity.profileId.text());
    							}
						);
					});
				// 删除
				ListenerBinder.bind(btnDelete, MouseEvent.CLICK, function():void
					{
					    if (datagrid.selectedIndices.length == 0) {
					        Alert.show("请选择要删除的数据！");
					        return;
					    }
						currentOperationMethod=OperationMethod.DELETE;
						HttpServiceProxy.send(LocalPlayerProfileService.DELETE_PLAYER_PROFILE, {PROFILE_ID: datagrid.selectedItem.profileId.text()}, null, 
						        function():void
    							{
    								defaultSearch();
    							}
    					);
						currentOperationMethod=OperationMethod.UNKNOWN;
					});
				// 确定
				ListenerBinder.bind(btnSubmit, MouseEvent.CLICK, function():void
					{
                        if (Validator.validateAll(submitValidators).length != 0) {
                            return;
                        }
						if (currentOperationMethod == OperationMethod.CREATE)
						{
							HttpServiceProxy.send(LocalPlayerProfileService.CREATE_PLAYER_PROFILE, 
							        {USER_ID : playerUserId.text, 
							         PASSWORD : playerPassword.text, 
							         RLS_PATH : (playerRlsPath.selectedItem.data + "!" + playerUserId.text).replace(/^!/, ""), 
							         CURRENT_SCORE : playerCurrentScore.text, 
							         INIT_LIMIT : playerLimit.text, 
							         ROLE : playerRole.selectedItem.data, 
							         STATUS : disableGroup.selectedValue, 
							         CURRENT_ROLE : Application.application.currentRole}, 
							        null, 
							        function(event:ResultEvent):void {
    									var e4xResult:XML=new XML(event.result);
    									playerProfileId.text=e4xResult.entity.profileId.text();
    								});
						}
						else if (currentOperationMethod == OperationMethod.UPDATE)
						{
							HttpServiceProxy.send(LocalPlayerProfileService.UPDATE_PLAYER_PROFILE, 
							        {PROFILE_ID : playerProfileId.text, 
							         USER_ID : playerUserId.text, 
							         PASSWORD : playerPassword.text, 
							         ROLE : playerRole.selectedItem.data, 
							         STATUS : disableGroup.selectedValue, 
							         CURRENT_ROLE : Application.application.currentRole});
						}
						currentOperationMethod=OperationMethod.UPDATE;
					});
				// 取消
				ListenerBinder.bind(btnBack, MouseEvent.CLICK, function():void
					{
						currentState="LIST";
						currentOperationMethod=OperationMethod.UNKNOWN;
					}
				);
				// 绑定监听
                ListenerBinder.bind(this, StateChangeEvent.CURRENT_STATE_CHANGE, function (event:StateChangeEvent):void
                    {
                        ChangeWatcher.watch(playerCurrentScore, "text", function(event:Event):void {
                            if (currentState == "EDIT") {
                                playerLimit.text = playerCurrentScore.text;
                            }
                        });
                    });

                // 初始化玩家关系路径
                var rlsPathes:Array = new Array();
                if (Application.application.currentRole == "Administrator") {
                    // 系统管理员可以添加一个顶级节点
                    rlsPathes.push({data: "", label:""});
                }
                var rlsPathLoad:Function = function (event:ResultEvent):void {
			        for each (var rlsPath:* in new XML(event.result).tag.map.rlsPath) {
			        	trace(event.result);
			            rlsPathes.push({data: rlsPath, label: rlsPath});
			        }
			        playerRlsPath.dataProvider = rlsPathes;
                };
                if (Application.application.currentRole == "Administrator") {
				    HttpServiceProxy.send(LocalPlayerProfileService.RETRIEVE_PLAYER_RLS_PATH, null, null, rlsPathLoad);
                } else if (Application.application.currentRole == "GroupUser") {
				    HttpServiceProxy.send(
				            LocalPlayerProfileService.RETRIEVE_PLAYER_RLS_PATH, 
				            {CURRENT_RLS_PATH : Application.application.currentRlsPath}, 
				            null, 
				            rlsPathLoad);
                }
			    // 初始化玩家角色
			    HttpServiceProxy.send(LocalPlayerProfileService.RETRIEVE_PLAYER_ROLE, {CURRENT_ROLE : Application.application.currentRole}, null, 
			            function(event:ResultEvent):void {
        			        playerRole.dataProvider = null;
        			        var roles:Array = new Array();
        			        trace(event.result);
        			        for each (var eachRole:String in new XML(event.result).tag.string) {
        			            roles.push({data : eachRole.split("~")[0], label : eachRole.split("~")[1]});
        			        }
        			        playerRole.dataProvider = roles.sort();
			            }
			    );
			}
		]]>
	</mx:Script>
	<states>
		<mx:State name="EDIT">
			<mx:AddChild position="lastChild">
				<mx:Form id="editor"
						 left="0"
						 right="0"
						 top="0"
						 bottom="40">
					<mx:FormItem label="uuid"
								 visible="false">
						<mx:TextInput id="playerProfileId"/>
					</mx:FormItem>
					<mx:FormItem label="用户ID">
						<mx:TextInput id="playerUserId" maxChars="16"/>
					</mx:FormItem>
					<mx:FormItem label="密码">
						<mx:TextInput id="playerPassword"
									  displayAsPassword="true"
									  maxChars="16"/>
					</mx:FormItem>
					<mx:FormItem label="密码确认">
						<mx:TextInput id="playerPasswordConfirm"
									  displayAsPassword="true"
									  maxChars="16"/>
					</mx:FormItem>
					<mx:FormItem label="所属用户组">
						<mx:ComboBox id="playerRlsPath" selectedIndex="0" selectedItem=""/>
					</mx:FormItem>
					<mx:FormItem label="初始分值">
						<mx:TextInput id="playerCurrentScore" maxChars="6"/>
					</mx:FormItem>
					<mx:FormItem label="用户额度">
						<mx:TextInput id="playerLimit" maxChars="6" editable="false"/>
					</mx:FormItem>
					<mx:FormItem label="角色">
						<mx:ComboBox id="playerRole" selectedIndex="0" selectedItem=""/>
					</mx:FormItem>
					<mx:FormItem label="状态">
    					<mx:RadioButtonGroup id="disableGroup"/>
    					<mx:RadioButton label="启用" value="true" group="{disableGroup}"/>
    					<mx:RadioButton label="禁用" value="false" group="{disableGroup}"/>
					</mx:FormItem>
				</mx:Form>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:Button label="确定"
						   id="btnSubmit"
						   right="66"
						   bottom="10"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:Button label="返回"
						   id="btnBack"
						   right="10"
						   bottom="10"/>
			</mx:AddChild>
			<mx:SetProperty name="title"
							value="用户编辑"/>
		</mx:State>
		<mx:State name="LIST">
			<mx:AddChild position="lastChild">
				<mx:HBox left="10"
						 right="10"
						 top="10">
					<mx:Label text="用户ID"/>
					<mx:TextInput/>
					<mx:Label text="用户组"/>
					<mx:TextInput/>
					<mx:Label text="用户额度"/>
					<mx:TextInput/>
					<mx:Button id="btnSearch"
							   label="查询"/>
				</mx:HBox>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:HBox top="40"
						 left="10"
						 right="10">
					<mx:Button label="添加"
							   id="btnCreate"/>
					<mx:Button label="修改"
							   id="btnUpdate"/>
					<mx:Button label="删除"
							   id="btnDelete"/>
				</mx:HBox>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:DataGrid top="68"
							 left="10"
							 right="10"
							 bottom="10"
							 id="datagrid">
					<mx:dataProvider>{infoService.lastResult.entityList.map}</mx:dataProvider>
					<mx:columns>
						<mx:DataGridColumn dataField="profileId"
										   visible="false"/>
						<mx:DataGridColumn dataField="password"
										   visible="false"/>
						<mx:DataGridColumn headerText="用户ID"
										   dataField="userId"/>
						<mx:DataGridColumn headerText="所属用户组"
										   dataField=""/>
						<mx:DataGridColumn headerText="用户额度"
										   dataField=""/>
						<mx:DataGridColumn headerText="角色"
										   dataField="role"/>
						<mx:DataGridColumn headerText="创建日期"
										   dataField="createTime"/>
						<mx:DataGridColumn headerText="创建人"
										   dataField="createBy"/>
					</mx:columns>
				</mx:DataGrid>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:ControlBar paddingTop="0"
							   paddingBottom="0"
							   horizontalAlign="right">
					<mx:Label id="lblPage"
							  text="{infoService.lastResult.pagination.currentPage + '/' + infoService.lastResult.pagination.totalPage}"/>
					<mx:LinkBar id="pageRoller">
						<mx:Array>
							<mx:Object label="前页"/>
							<mx:Object label="后页"/>
						</mx:Array>
					</mx:LinkBar>
				</mx:ControlBar>
			</mx:AddChild>
			<mx:SetProperty name="title"
							value="用户列表"/>
		</mx:State>
	</states>
	<mx:Number id="CURRENT_PAGE">{infoService.lastResult.pagination.currentPage}</mx:Number>
	<mx:Number id="TOTAL_PAGE">{infoService.lastResult.pagination.totalPage}</mx:Number>
    <!-- 验证器 -->
    <mx:Array id="submitValidators">
        <mx:RegExpValidator source="{playerUserId}"
                            required="true"
                            property="text"
                            expression="{'^[a-z][0-9a-z]{3,15}$'}"
                            flags="i"
                            noMatchError="用户ID长度需要在4到16之间，只能由半角字母和数字组合，且首位必须为字母！"
                            requiredFieldError="用户ID不能为空！"/>
        <mx:StringValidator source="{playerPassword}"
                            required="true"
                            property="text"
                            requiredFieldError="密码不能为空！"/>
        <mx:StringValidator source="{playerPasswordConfirm}"
                            required="true"
                            property="text"
                            requiredFieldError="密码确认不能为空！"/>
        <mx:StringValidator source="{playerCurrentScore}"
                            required="true"
                            property="text"
                            requiredFieldError="初始分值不能为空！"/>
        <mx:StringValidator source="{playerRole}"
                            required="true"
                            property="text"
                            requiredFieldError="用户角色不能为空！"/>
    </mx:Array>
</FunctionWindow>
